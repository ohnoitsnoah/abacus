( abacus.tal - a neat little abacus )

|00 @System     &vector $2 &wst     $1 &rst  $1 &eaddr  $2 &ecode  $1 &pad  $1 &r   $2 &g  $2 &b  $2 &debug  $1 &halt  $1
|10 @Console    &vector $2 &read    $1 &pad  $5 &write  $1 &error $1
|20 @Screen     &vector $2 &width   $2 &height  $2 &auto  $1 &pad  $1 &x  $2 &y  $2 &addr  $2 &pixel  $1 &sprite  $1
|80 @Controller &vector $2 &button  $1 &key  $1
|90 @Mouse      &vector $2 &x  $2 &y  $2 &state  $1 &pad  $3 &scrollx $2 &scrolly $2

( variables )
|0000
  @abacus-state ( 10 rods, 10 beads ea/rod )
    $0a ( rod 0 - ones )
    $0a ( rod 1 - tens )
    $0a ( rod 2 - hundreds )
    $0a ( rod 3 - thousands )
    $0a ( rod 4 - ten-thousands )
    $0a ( rod 5 - hundred-thousands )
    $0a ( rod 6 - millions )
    $0a ( rod 7 - ten-millions )
    $0a ( rod 8 - hundred-millions )
    $0a ( rod 9 - billions )
@mouse-x $2
@mouse-y $2
@current-value $4

( program )
|0100
  ( screen setup )
  #2ce0 .Screen/width DE02
  #01e0 .Screen/height DE02

  ( set colors )
  #0124 .System/r DE02
  #0135 .System/g DE02
  #0246 .System/b DE02

  ( set vectors )
  ;on-mouse .Mouse/vector DE02
  ;on-key .Controller/vector DE02

  ( init abacus )
  ;init-abacus JSR2

  ( draw inital state )
  ;draw-abacus JSR2

BRK

@init-abacus
  ( sets all rods to 0 beads at top )
  #00 #0a
  &loop
    DUP #00 ;abacus-state ADD2 STA
    INC GTHk ,&loop JCN
  POP2
RTN


@on-mouse
  .Mouse/x DEI2 .mouse-x STZ2
  .Mouse/y DEI2 .mouse-y STZ2

  .Mouse/state DEI #01 AND
  ,&click JCN
  BRK

  &click
    ;handle-click JSR2
    ;draw-abacus JSR2
    ;calculate-value JSR2
    ;draw-value JSR2
  BRK

@on-key
  .Controller/key DEI
  DUP #20 EQU ,&reset JCN ( space to reset )
  DUP #0d EQU ,&reset JCN ( enter to reset )
  POP BRK

  &reset
    POP
    ;init-abacus JSR2
    ;draw-abacus JSR2
    ;calculate-value JSR2
    ;draw-value JSR2
  BRK

@handle-click
  .mouse-x LDZ2 #0040 LTH2 ,&end JCN ( too far left )
  .mouse-x LDZ2 #0280 GTH2 ,&end JCN ( too far right )
  .mouse-y LDZ2 #0060 LTH2 ,&end JCN ( too high )
  .mouse-y LDZ2 #01c0 GTH2 ,&end JCN ( too low )

  ( calculate which rod was clicked )
  .mouse-x LDZ2 #0040 SUB2 #0024 DIV2 NIP
  DUP #0a LTH ,&valid-rod JCN
  POP ,&end JMP

  &valid-rod
  ( rod is valid, now calculate which bead )
    DUP ;abacus-state ADD2 LDA
    .mouse-y LDZ2 #0080 LTH2 ,&upper-half JCN

    ( lower half - move beads up )
    INC #0a MIN
    ,&update-rod JMP

    &upper-half
    ( upper half - move beads down )
    #01 SUB #00 MAX

    &update-rod
    OVER ;abacus-state ADD2 STA
    POP


  &end
RTN


@draw-abacus
  ( clear screen )
  #40 .Screen/auto DEO
  #0000 .Screen/addr DEO2
  #00 .Screen/pixel DEO

  ( draw frame )
  ;draw-frame JSR2

  ( draw rods )
  #00 #0a
  &rod-loop
    DUP ;draw-rod JSR2
    INC GTHk ,&rod-loop JCN
  POP2
RTN

@draw-frame
  ( draw top bar )
  #0040 .Screen/x DEO2
  #0060 .Screen/y DEO2
  #01 .Screen/pixel DEO
  #0200 .Screen/x DEO2
  #01 .Screen/pixel DEO

  ( draw bottom bar )
  #0040 .Screen/x DEO2
  #0140 .Screen/y DEO2
  #01 .Screen/pixel DEO
  #0200 .Screen/x DEO2
  #01 .Screen/pixel DEO

  ( draw vertical separators )
  #00 #0b
  &sep-loop
    DUP #0024 MUL2 #0040 ADD2 .Screen/x DEO2  
    #0060 .Screen/y DEO2
    #01 .Screen/pixel DEO
    #0140 .Screen/y DEO2
    #01 .Screen/pixel DEO
    INC GTHk ,&sep-loop JCN
  POP2
RTN


@draw-rod
  ( rod number in stack )
  DUP #0024 MUL2 #0052 ADD2 .Screen/x DEO2
  
  ( get bread count for selected rod )
  DUP ;abacus-state ADD2 LDA

  ( draw beads at top )
  #0070 .Screen/y DEO2
  #00 OVER
  &top-loop
    #02 .Screen/pixel DEO
    .Screen/y DEI2 #0008 ADD2 .Screen/y DEO2
    INC GTHk ,&top-loop JCN
  POP2

  ( draw beads at bottom )
  #0138 .Screen/y DEO2
  #0a OVER SUB #00
  &botton-loop
    #03 .Screen/pixel DEO
    .Screen/y DEI2 #0008 SUB2 .Screen/y DEO2
    INC GTHk ,&botton-loop JCN
  POP2

  POP
RTN


@calculate-value
  #00000000 .current-value STZ2


  ( multiplier starts at 1 )
  #00000001

  #00 #0a
  &loop
    ( get bead count for current rod )
    DUP ;abacus-state ADD2 LDA #000000 SWP

    ( multiply by multiplier )
    ROT2 MUL2

    ( add to total )
    .current-value LDZ2 ADD2 .current-value STZ2

    ( increment multiplier )
    ROT2 #0000000a MUL2

    ROT INC ROT ROT
    GTHk ,&loop JCN
  POP2 POP2
RTN


@draw-value
  ( draw value on bottom of screen )
  #0040 .Screen/x DE02
  #0160 .Screen/y DE02

  ( clear previous value )
  .current-value LDZ2
  ;draw-number JSR2
RTN

@draw-number
  ( draw a 32-bit number )
  DUP2 #00000000 EQU ,&end JCN ( zero )

  ( extract digits )
  #00 ( digit count )

  &extract-loop
    ROT2 DUP2 #00000000 EQU2 ,&extract-done JCN
    #0000000a DIV2k MUL2 SUB2 ( remainder )
    SWP POP #30 ADD ( convert to ASCII )
    ROT INC ROT ROT ( inc digit count )
    SWP2 #0000000a DIV2 SWP2 ( divide by 10 )
    ,&extract-loop JCN

  &extract-done
    POP2


    ( draw digits )
    &draw-loop
      DUP #00 EQU ,&draw-done JCN
      ;draw-char JSR2
      .Screen/x DEI #0008 ADD2 .Screen/x DEO2
      #01 SUB
      ,&draw-loop JMP

    &draw-done
      POP
    RTN
  
  &zero
    POP2
    #30 ;draw-char JSR2
RTN

@draw-char
  ( draw a single character at current screen position )
  #20 SUB #0008 MUL2 ;font ADD2 .Screen/addr DEO2
  #01 .Screen/pixel DEO
RTN


@font
  ( 8x8 font for digits 0-9 )
  3c66 6e76 6666 663c 1818 1818 1818 187e
  3c66 0606 0c18 3060 7e00 3c66 061c 0606 663c
  0c1c 3c6c ccfe 0c0c 0c00 7e60 607c 0606 663c
  3c66 607c 6666 663c 7e06 060c 1830 3000
  3c66 663c 6666 663c 3c66 663e 0606 663c
